{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPjkeLdrlySZ1bWQqR1X4J8"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "aLT_WnPCOnRx"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import zipfile\n",
        "import urllib.request\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.preprocessing import normalize"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "DATA_URL = \"https://files.grouplens.org/datasets/movielens/ml-latest-small.zip\"\n",
        "ZIP_PATH = \"/content/ml-latest-small.zip\"\n",
        "DATA_DIR = \"/content/ml-latest-small\"\n",
        "\n",
        "if not os.path.exists(DATA_DIR):\n",
        "    print(\"Downloading MovieLens (ml-latest-small)...\")\n",
        "    urllib.request.urlretrieve(DATA_URL, ZIP_PATH)\n",
        "    with zipfile.ZipFile(ZIP_PATH, 'r') as zf:\n",
        "        zf.extractall(\"/content\")\n",
        "    print(\"Done.\")\n",
        "\n",
        "movies = pd.read_csv(os.path.join(DATA_DIR, \"movies.csv\"))\n",
        "ratings = pd.read_csv(os.path.join(DATA_DIR, \"ratings.csv\"))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E3lESpJiPNux",
        "outputId": "bb207edc-95af-4ed2-9f84-7acfb89ce77c"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading MovieLens (ml-latest-small)...\n",
            "Done.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "assert {\"movieId\", \"title\", \"genres\"}.issubset(movies.columns)\n",
        "assert {\"userId\", \"movieId\", \"rating\"}.issubset(ratings.columns)\n",
        "\n",
        "print(f\"Loaded {len(movies)} movies and {len(ratings)} ratings.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d7pu4QIxPTbQ",
        "outputId": "d08faf43-645c-4c6f-c1a0-b7de18f283bd"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loaded 9742 movies and 100836 ratings.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "R_df = ratings.pivot_table(index=\"userId\", columns=\"movieId\", values=\"rating\")\n",
        "R = R_df.fillna(0).values  # users x movies\n",
        "movie_ids = R_df.columns.to_numpy()\n",
        "user_ids = R_df.index.to_numpy()\n"
      ],
      "metadata": {
        "id": "bIpUhLJDPb7u"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "R_item_norm = normalize(R, norm='l2', axis=0)  # normalize each movie column\n",
        "item_sim = cosine_similarity(R_item_norm.T, dense_output=True)  # (M x M)\n",
        "np.fill_diagonal(item_sim, 0.0)  # ignore self-similarity\n",
        "\n",
        "# Map for id <-> column index\n",
        "movieid_to_col = {m: i for i, m in enumerate(movie_ids)}\n",
        "userid_to_row = {u: i for i, u in enumerate(user_ids)}"
      ],
      "metadata": {
        "id": "xceqWm2vPfv8"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# ---------------------------\n",
        "# 3) Build content-based model (TF-IDF on title + genres), aligned with rated movies\n",
        "# ---------------------------\n",
        "content_df = movies.copy()\n",
        "\n",
        "# Clean up genres\n",
        "content_df[\"genres\"] = content_df[\"genres\"].replace(\"(no genres listed)\", \"\", regex=False)\n",
        "\n",
        "# Combine title + genres\n",
        "content_df[\"text\"] = (content_df[\"title\"].fillna(\"\") + \" \" +\n",
        "                      content_df[\"genres\"].str.replace(\"|\", \" \", regex=False).fillna(\"\"))\n",
        "\n",
        "# Restrict to movies that appear in ratings pivot (movie_ids)\n",
        "content_df = content_df.set_index(\"movieId\").loc[movie_ids].reset_index()\n",
        "\n",
        "# TF-IDF vectorization\n",
        "\n"
      ],
      "metadata": {
        "id": "RnaPuU9oPmTF"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tfidf = TfidfVectorizer(stop_words=\"english\", min_df=2)\n",
        "tfidf_matrix = tfidf.fit_transform(content_df[\"text\"])  # aligned with movie_ids order\n",
        "\n",
        "# Content similarity\n",
        "content_sim = cosine_similarity(tfidf_matrix, dense_output=False)\n"
      ],
      "metadata": {
        "id": "RB-E2EpKPrfF"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def _get_movie_index_by_title(title_query, top_k=5):\n",
        "    \"\"\"Fuzzy-ish match by containment; returns indices in the movie_ids order.\"\"\"\n",
        "    q = title_query.strip().lower()\n",
        "    matches = content_df[content_df[\"title\"].str.lower().str.contains(q, na=False)]\n",
        "    if matches.empty:\n",
        "        return []\n",
        "    # Prefer exact startswith, then contains\n",
        "    starts = matches[matches[\"title\"].str.lower().str.startswith(q)]\n",
        "    results = (starts if not starts.empty else matches).head(top_k)\n",
        "    # Return indices in movie_ids order\n",
        "    return results.index.to_list()  # these are positional indices in the aligned content_df"
      ],
      "metadata": {
        "id": "Itw5LrRIPw18"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def similar_to_movie(title, top_n=10, method=\"hybrid\"):\n",
        "    \"\"\"Find movies similar to a given title using content / item / hybrid similarity.\"\"\"\n",
        "    idxs = _get_movie_index_by_title(title, top_k=1)\n",
        "    if not idxs:\n",
        "        print(f\"No match found for title: {title}\")\n",
        "        return pd.DataFrame()\n",
        "\n",
        "    idx = idxs[0]\n",
        "    # Similarities from content & item spaces\n",
        "    sim_content = content_sim[idx].toarray().ravel() if hasattr(content_sim, \"toarray\") else content_sim[idx]\n",
        "    sim_item = item_sim[idx] if isinstance(item_sim, np.ndarray) else item_sim[idx].toarray().ravel()\n",
        "\n",
        "    if method == \"content\":\n",
        "        sim = sim_content\n",
        "    elif method == \"item\":\n",
        "        sim = sim_item\n",
        "    else:  # hybrid: average (where either is nonzero)\n",
        "        sim = np.where((sim_content > 0) & (sim_item > 0),\n",
        "                       0.5 * (sim_content + sim_item),\n",
        "                       np.maximum(sim_content, sim_item))\n",
        "\n",
        "    # Exclude the movie itself\n",
        "    sim[idx] = -np.inf\n",
        "    top_idx = np.argpartition(-sim, range(top_n))[:top_n]\n",
        "    top_idx = top_idx[np.argsort(-sim[top_idx])]\n",
        "\n",
        "    out = content_df.loc[top_idx, [\"movieId\", \"title\", \"genres\"]].copy()\n",
        "    out.insert(3, \"similarity\", sim[top_idx])\n",
        "    return out.reset_index(drop=True)"
      ],
      "metadata": {
        "id": "PAUSFofaP4Is"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def recommend_for_user(user_id, top_n=10, alpha=0.5):\n",
        "    \"\"\"\n",
        "    Recommend movies for a user by combining:\n",
        "      - Item-item CF score (weighted sum of user's ratings and item similarity)\n",
        "      - Content-based \"profile\" (user likes movies' content they've rated highly)\n",
        "    alpha: weight for collaborative (0..1). 0.5 = equal blend.\n",
        "    \"\"\"\n",
        "    if user_id not in userid_to_row:\n",
        "        raise ValueError(f\"user_id {user_id} not found. Try one from: {list(userid_to_row.keys())[:10]} ...\")\n",
        "\n",
        "    urow = userid_to_row[user_id]\n",
        "    user_ratings = R[urow, :]  # ratings vector across movies\n",
        "    rated_mask = user_ratings > 0\n",
        "\n",
        "    # --- Collaborative score: wavg of sims with items the user rated ---\n",
        "    # score_j = sum_i sim(i,j) * r_ui  over i the movies user rated\n",
        "    if rated_mask.any():\n",
        "        sims_to_rated = item_sim[:, rated_mask]  # (M x K)\n",
        "        weights = user_ratings[rated_mask]       # (K,)\n",
        "        cf_scores = sims_to_rated.dot(weights) / (np.abs(sims_to_rated).sum(axis=1) + 1e-8)\n",
        "    else:\n",
        "        cf_scores = np.zeros(item_sim.shape[0])\n",
        "\n",
        "    # --- Content-based score: build a user profile vector in TF-IDF space ---\n",
        "    if rated_mask.any():\n",
        "        liked_idx = np.where(rated_mask)[0]\n",
        "        liked_ratings = user_ratings[liked_idx]\n",
        "        # Weighted average of liked movie vectors\n",
        "        profile = (tfidf_matrix[liked_idx].T.dot(liked_ratings)).reshape(-1)\n",
        "        # Normalize profile\n",
        "        prof_norm = np.linalg.norm(profile)\n",
        "        if prof_norm > 0:\n",
        "            profile = profile / prof_norm\n",
        "        cb_scores = (tfidf_matrix @ profile)  # similarity to profile\n",
        "        cb_scores = np.array(cb_scores).ravel()\n",
        "    else:\n",
        "        cb_scores = np.zeros(item_sim.shape[0])\n",
        "\n",
        "    # --- Hybrid combine ---\n",
        "    hybrid = alpha * cf_scores + (1 - alpha) * cb_scores\n",
        "\n",
        "    # Do not recommend already-rated movies\n",
        "    hybrid[rated_mask] = -np.inf\n",
        "\n",
        "    # Top-N\n",
        "    top_idx = np.argpartition(-hybrid, range(top_n))[:top_n]\n",
        "    top_idx = top_idx[np.argsort(-hybrid[top_idx])]\n",
        "\n",
        "    out = content_df.loc[top_idx, [\"movieId\", \"title\", \"genres\"]].copy()\n",
        "    out.insert(3, \"score\", hybrid[top_idx])\n",
        "    return out.reset_index(drop=True)\n"
      ],
      "metadata": {
        "id": "lQVED01sQBFC"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\nExamples:\")\n",
        "example_user = int(user_ids[0])\n",
        "print(f\"- Try recommending for user_id={example_user}:\")\n",
        "display(recommend_for_user(1, top_n=15, alpha=0.6))\n",
        "\n",
        "print(\"\\n- Try 'similar_to_movie(\\\"Toy Story\\\")':\")\n",
        "display(similar_to_movie(\"Toy Story\", top_n=10, method=\"hybrid\"))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 952
        },
        "id": "HRxDhF8zQFw9",
        "outputId": "9f825a97-1c2c-4546-8530-f59569cbb29b"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Examples:\n",
            "- Try recommending for user_id=1:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "    movieId                                              title  \\\n",
              "0    161594               Kingsglaive: Final Fantasy XV (2016)   \n",
              "1    191005                                     Gintama (2017)   \n",
              "2    177285   Sword Art Online The Movie: Ordinal Scale (2017)   \n",
              "3     63239                                  Cinderella (1997)   \n",
              "4    180987                                   Ferdinand (2017)   \n",
              "5    175585                                 Shot Caller (2017)   \n",
              "6    193565                          Gintama: The Movie (2010)   \n",
              "7    175475                             The Emoji Movie (2017)   \n",
              "8    184641                    Fullmetal Alchemist 2018 (2017)   \n",
              "9     90524                                   Abduction (2011)   \n",
              "10   193581          Black Butler: Book of the Atlantic (2017)   \n",
              "11   103210  Fullmetal Alchemist: The Sacred Star of Milos ...   \n",
              "12   157369                                     Bakuman (2015)   \n",
              "13     3899                                      Circus (2000)   \n",
              "14   162968             Kizumonogatari Part 1: Tekketsu (2016)   \n",
              "\n",
              "                                             genres     score  \n",
              "0   Action|Adventure|Animation|Drama|Fantasy|Sci-Fi  3.185770  \n",
              "1                    Action|Adventure|Comedy|Sci-Fi  3.128526  \n",
              "2         Action|Adventure|Animation|Fantasy|Sci-Fi  3.125450  \n",
              "3                  Children|Fantasy|Musical|Romance  3.102984  \n",
              "4                         Animation|Children|Comedy  3.102051  \n",
              "5                       Action|Crime|Drama|Thriller  3.101522  \n",
              "6                    Action|Animation|Comedy|Sci-Fi  3.101011  \n",
              "7                         Animation|Children|Comedy  3.083712  \n",
              "8                          Action|Adventure|Fantasy  3.075927  \n",
              "9                     Action|Drama|Mystery|Thriller  3.074446  \n",
              "10                  Action|Animation|Comedy|Fantasy  3.073220  \n",
              "11                       Action|Adventure|Animation  3.073166  \n",
              "12                                     Comedy|Drama  3.072788  \n",
              "13                             Crime|Drama|Thriller  3.071815  \n",
              "14                         Action|Animation|Mystery  3.068602  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-caa8a3c5-ed85-4621-a120-36fbb377a0ce\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>movieId</th>\n",
              "      <th>title</th>\n",
              "      <th>genres</th>\n",
              "      <th>score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>161594</td>\n",
              "      <td>Kingsglaive: Final Fantasy XV (2016)</td>\n",
              "      <td>Action|Adventure|Animation|Drama|Fantasy|Sci-Fi</td>\n",
              "      <td>3.185770</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>191005</td>\n",
              "      <td>Gintama (2017)</td>\n",
              "      <td>Action|Adventure|Comedy|Sci-Fi</td>\n",
              "      <td>3.128526</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>177285</td>\n",
              "      <td>Sword Art Online The Movie: Ordinal Scale (2017)</td>\n",
              "      <td>Action|Adventure|Animation|Fantasy|Sci-Fi</td>\n",
              "      <td>3.125450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>63239</td>\n",
              "      <td>Cinderella (1997)</td>\n",
              "      <td>Children|Fantasy|Musical|Romance</td>\n",
              "      <td>3.102984</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>180987</td>\n",
              "      <td>Ferdinand (2017)</td>\n",
              "      <td>Animation|Children|Comedy</td>\n",
              "      <td>3.102051</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>175585</td>\n",
              "      <td>Shot Caller (2017)</td>\n",
              "      <td>Action|Crime|Drama|Thriller</td>\n",
              "      <td>3.101522</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>193565</td>\n",
              "      <td>Gintama: The Movie (2010)</td>\n",
              "      <td>Action|Animation|Comedy|Sci-Fi</td>\n",
              "      <td>3.101011</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>175475</td>\n",
              "      <td>The Emoji Movie (2017)</td>\n",
              "      <td>Animation|Children|Comedy</td>\n",
              "      <td>3.083712</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>184641</td>\n",
              "      <td>Fullmetal Alchemist 2018 (2017)</td>\n",
              "      <td>Action|Adventure|Fantasy</td>\n",
              "      <td>3.075927</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>90524</td>\n",
              "      <td>Abduction (2011)</td>\n",
              "      <td>Action|Drama|Mystery|Thriller</td>\n",
              "      <td>3.074446</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>193581</td>\n",
              "      <td>Black Butler: Book of the Atlantic (2017)</td>\n",
              "      <td>Action|Animation|Comedy|Fantasy</td>\n",
              "      <td>3.073220</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>103210</td>\n",
              "      <td>Fullmetal Alchemist: The Sacred Star of Milos ...</td>\n",
              "      <td>Action|Adventure|Animation</td>\n",
              "      <td>3.073166</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>157369</td>\n",
              "      <td>Bakuman (2015)</td>\n",
              "      <td>Comedy|Drama</td>\n",
              "      <td>3.072788</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>3899</td>\n",
              "      <td>Circus (2000)</td>\n",
              "      <td>Crime|Drama|Thriller</td>\n",
              "      <td>3.071815</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>162968</td>\n",
              "      <td>Kizumonogatari Part 1: Tekketsu (2016)</td>\n",
              "      <td>Action|Animation|Mystery</td>\n",
              "      <td>3.068602</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-caa8a3c5-ed85-4621-a120-36fbb377a0ce')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-caa8a3c5-ed85-4621-a120-36fbb377a0ce button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-caa8a3c5-ed85-4621-a120-36fbb377a0ce');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-55a33c55-9952-4d3b-9ea2-375edc9a6bc8\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-55a33c55-9952-4d3b-9ea2-375edc9a6bc8')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-55a33c55-9952-4d3b-9ea2-375edc9a6bc8 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(similar_to_movie(\\\"Toy Story\\\", top_n=10, method=\\\"hybrid\\\"))\",\n  \"rows\": 15,\n  \"fields\": [\n    {\n      \"column\": \"movieId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 56417,\n        \"min\": 3899,\n        \"max\": 193581,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          90524,\n          103210,\n          161594\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"Abduction (2011)\",\n          \"Fullmetal Alchemist: The Sacred Star of Milos (2011)\",\n          \"Kingsglaive: Final Fantasy XV (2016)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"genres\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"Action|Animation|Comedy|Fantasy\",\n          \"Comedy|Drama\",\n          \"Action|Adventure|Animation|Drama|Fantasy|Sci-Fi\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03168823101778276,\n        \"min\": 3.0686021308462466,\n        \"max\": 3.185769742402971,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          3.074446284520109,\n          3.0731664216375982,\n          3.185769742402971\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "- Try 'similar_to_movie(\"Toy Story\")':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   movieId                              title  \\\n",
              "0     3114                 Toy Story 2 (1999)   \n",
              "1    78499                 Toy Story 3 (2010)   \n",
              "2      243                       Gordy (1995)   \n",
              "3      318   Shawshank Redemption, The (1994)   \n",
              "4     2762            Sixth Sense, The (1999)   \n",
              "5      589  Terminator 2: Judgment Day (1991)   \n",
              "6      593   Silence of the Lambs, The (1991)   \n",
              "7     1240             Terminator, The (1984)   \n",
              "8     2571                 Matrix, The (1999)   \n",
              "9      592                      Batman (1989)   \n",
              "\n",
              "                                             genres  similarity  \n",
              "0       Adventure|Animation|Children|Comedy|Fantasy    0.726452  \n",
              "1  Adventure|Animation|Children|Comedy|Fantasy|IMAX    0.619086  \n",
              "2                           Children|Comedy|Fantasy    0.534313  \n",
              "3                                       Crime|Drama    0.508545  \n",
              "4                              Drama|Horror|Mystery    0.486156  \n",
              "5                                     Action|Sci-Fi    0.482630  \n",
              "6                             Crime|Horror|Thriller    0.479422  \n",
              "7                            Action|Sci-Fi|Thriller    0.471270  \n",
              "8                            Action|Sci-Fi|Thriller    0.471218  \n",
              "9                             Action|Crime|Thriller    0.468253  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1afe5472-ed70-4388-a677-7e357ce7b63c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>movieId</th>\n",
              "      <th>title</th>\n",
              "      <th>genres</th>\n",
              "      <th>similarity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3114</td>\n",
              "      <td>Toy Story 2 (1999)</td>\n",
              "      <td>Adventure|Animation|Children|Comedy|Fantasy</td>\n",
              "      <td>0.726452</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>78499</td>\n",
              "      <td>Toy Story 3 (2010)</td>\n",
              "      <td>Adventure|Animation|Children|Comedy|Fantasy|IMAX</td>\n",
              "      <td>0.619086</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>243</td>\n",
              "      <td>Gordy (1995)</td>\n",
              "      <td>Children|Comedy|Fantasy</td>\n",
              "      <td>0.534313</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>318</td>\n",
              "      <td>Shawshank Redemption, The (1994)</td>\n",
              "      <td>Crime|Drama</td>\n",
              "      <td>0.508545</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2762</td>\n",
              "      <td>Sixth Sense, The (1999)</td>\n",
              "      <td>Drama|Horror|Mystery</td>\n",
              "      <td>0.486156</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>589</td>\n",
              "      <td>Terminator 2: Judgment Day (1991)</td>\n",
              "      <td>Action|Sci-Fi</td>\n",
              "      <td>0.482630</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>593</td>\n",
              "      <td>Silence of the Lambs, The (1991)</td>\n",
              "      <td>Crime|Horror|Thriller</td>\n",
              "      <td>0.479422</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>1240</td>\n",
              "      <td>Terminator, The (1984)</td>\n",
              "      <td>Action|Sci-Fi|Thriller</td>\n",
              "      <td>0.471270</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2571</td>\n",
              "      <td>Matrix, The (1999)</td>\n",
              "      <td>Action|Sci-Fi|Thriller</td>\n",
              "      <td>0.471218</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>592</td>\n",
              "      <td>Batman (1989)</td>\n",
              "      <td>Action|Crime|Thriller</td>\n",
              "      <td>0.468253</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1afe5472-ed70-4388-a677-7e357ce7b63c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1afe5472-ed70-4388-a677-7e357ce7b63c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1afe5472-ed70-4388-a677-7e357ce7b63c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a0e28e50-9f45-469b-967d-16f3dea63c57\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a0e28e50-9f45-469b-967d-16f3dea63c57')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a0e28e50-9f45-469b-967d-16f3dea63c57 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(similar_to_movie(\\\"Toy Story\\\", top_n=10, method=\\\"hybrid\\\"))\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"movieId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24425,\n        \"min\": 243,\n        \"max\": 78499,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          2571,\n          78499,\n          589\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Matrix, The (1999)\",\n          \"Toy Story 3 (2010)\",\n          \"Terminator 2: Judgment Day (1991)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"genres\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"Action|Sci-Fi|Thriller\",\n          \"Adventure|Animation|Children|Comedy|Fantasy|IMAX\",\n          \"Action|Sci-Fi\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"similarity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.08444133795844876,\n        \"min\": 0.46825288448060026,\n        \"max\": 0.726451847621824,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          0.4712175595074047,\n          0.6190863370305191,\n          0.48262988592514194\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ---------------------------\n",
        "# 6) Convenience: search & call\n",
        "# ---------------------------\n",
        "def search_titles(query, top=10):\n",
        "    m = content_df[content_df[\"title\"].str.contains(query, case=False, na=False)]\n",
        "    return m[[\"movieId\", \"title\", \"genres\"]].head(top).reset_index(drop=True)\n",
        "\n",
        "print(\"\\nSearch by title (example):\")\n",
        "display(search_titles(\"star wars\"))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 397
        },
        "id": "5w9C26qMR3yL",
        "outputId": "0a2315f1-13b8-427b-f6fc-526be40f2c53"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Search by title (example):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   movieId                                              title  \\\n",
              "0      260          Star Wars: Episode IV - A New Hope (1977)   \n",
              "1     1196  Star Wars: Episode V - The Empire Strikes Back...   \n",
              "2     1210  Star Wars: Episode VI - Return of the Jedi (1983)   \n",
              "3     2628   Star Wars: Episode I - The Phantom Menace (1999)   \n",
              "4     5378  Star Wars: Episode II - Attack of the Clones (...   \n",
              "5    33493  Star Wars: Episode III - Revenge of the Sith (...   \n",
              "6    61160                   Star Wars: The Clone Wars (2008)   \n",
              "7    79006  Empire of Dreams: The Story of the 'Star Wars'...   \n",
              "8   122886  Star Wars: Episode VII - The Force Awakens (2015)   \n",
              "9   135216               The Star Wars Holiday Special (1978)   \n",
              "\n",
              "                                 genres  \n",
              "0               Action|Adventure|Sci-Fi  \n",
              "1               Action|Adventure|Sci-Fi  \n",
              "2               Action|Adventure|Sci-Fi  \n",
              "3               Action|Adventure|Sci-Fi  \n",
              "4          Action|Adventure|Sci-Fi|IMAX  \n",
              "5               Action|Adventure|Sci-Fi  \n",
              "6     Action|Adventure|Animation|Sci-Fi  \n",
              "7                           Documentary  \n",
              "8  Action|Adventure|Fantasy|Sci-Fi|IMAX  \n",
              "9      Adventure|Children|Comedy|Sci-Fi  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-83eebef5-b10b-4f9d-b351-23a72a264465\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>movieId</th>\n",
              "      <th>title</th>\n",
              "      <th>genres</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>260</td>\n",
              "      <td>Star Wars: Episode IV - A New Hope (1977)</td>\n",
              "      <td>Action|Adventure|Sci-Fi</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1196</td>\n",
              "      <td>Star Wars: Episode V - The Empire Strikes Back...</td>\n",
              "      <td>Action|Adventure|Sci-Fi</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1210</td>\n",
              "      <td>Star Wars: Episode VI - Return of the Jedi (1983)</td>\n",
              "      <td>Action|Adventure|Sci-Fi</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2628</td>\n",
              "      <td>Star Wars: Episode I - The Phantom Menace (1999)</td>\n",
              "      <td>Action|Adventure|Sci-Fi</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5378</td>\n",
              "      <td>Star Wars: Episode II - Attack of the Clones (...</td>\n",
              "      <td>Action|Adventure|Sci-Fi|IMAX</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>33493</td>\n",
              "      <td>Star Wars: Episode III - Revenge of the Sith (...</td>\n",
              "      <td>Action|Adventure|Sci-Fi</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>61160</td>\n",
              "      <td>Star Wars: The Clone Wars (2008)</td>\n",
              "      <td>Action|Adventure|Animation|Sci-Fi</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>79006</td>\n",
              "      <td>Empire of Dreams: The Story of the 'Star Wars'...</td>\n",
              "      <td>Documentary</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>122886</td>\n",
              "      <td>Star Wars: Episode VII - The Force Awakens (2015)</td>\n",
              "      <td>Action|Adventure|Fantasy|Sci-Fi|IMAX</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>135216</td>\n",
              "      <td>The Star Wars Holiday Special (1978)</td>\n",
              "      <td>Adventure|Children|Comedy|Sci-Fi</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-83eebef5-b10b-4f9d-b351-23a72a264465')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-83eebef5-b10b-4f9d-b351-23a72a264465 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-83eebef5-b10b-4f9d-b351-23a72a264465');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b3050066-ce14-479d-a6b2-99cd68b11deb\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b3050066-ce14-479d-a6b2-99cd68b11deb')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b3050066-ce14-479d-a6b2-99cd68b11deb button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(search_titles(\\\"star wars\\\"))\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"movieId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 52654,\n        \"min\": 260,\n        \"max\": 135216,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          122886,\n          1196,\n          33493\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Star Wars: Episode VII - The Force Awakens (2015)\",\n          \"Star Wars: Episode V - The Empire Strikes Back (1980)\",\n          \"Star Wars: Episode III - Revenge of the Sith (2005)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"genres\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Action|Adventure|Sci-Fi\",\n          \"Action|Adventure|Sci-Fi|IMAX\",\n          \"Adventure|Children|Comedy|Sci-Fi\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    }
  ]
}